// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Asset } from '../fbs/asset';


export class Theia {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Theia {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTheia(bb:flatbuffers.ByteBuffer, obj?:Theia):Theia {
  return (obj || new Theia()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTheia(bb:flatbuffers.ByteBuffer, obj?:Theia):Theia {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Theia()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('THEA');
}

BGM(obj?:Asset):Asset|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Asset()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

VOX(index: number, obj?:Asset):Asset|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Asset()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

VOXLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

TME(obj?:Asset):Asset|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Asset()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startTheia(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addBGM(builder:flatbuffers.Builder, BGMOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, BGMOffset, 0);
}

static addVOX(builder:flatbuffers.Builder, VOXOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, VOXOffset, 0);
}

static createVOXVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVOXVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTME(builder:flatbuffers.Builder, TMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, TMEOffset, 0);
}

static endTheia(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishTheiaBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'THEA');
}

static finishSizePrefixedTheiaBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'THEA', true);
}

}
